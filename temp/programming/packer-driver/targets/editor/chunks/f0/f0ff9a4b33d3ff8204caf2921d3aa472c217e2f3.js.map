{"version":3,"sources":["file:///F:/git/TestMatch3/assets/Scripts/Logic/FieldManager.ts"],"names":["FieldManager","FieldConfig","constructor","field","CheckFromCoord","coord","addScore","concat","checkVerticalFromCoord","checkHorizontalFromCoord","result","startY","y","x","push","length","minCombinationLength","startX"],"mappings":"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","sourcesContent":["import { BallColor } from \"../Enums/BallColor\";\r\nimport { FieldConfig } from \"./FieldConfig\";\r\n\r\nexport class FieldManager extends FieldConfig{\r\n    constructor(private field : Array<Array<BallColor>>) {\r\n        super();\r\n    }\r\n\r\n    CheckFromCoord(coord: {x: number, y: number}) : {x: number, y: number}[] {\r\n        const addScore: {x: number, y: number}[] = []\r\n        addScore.concat(this.checkVerticalFromCoord(coord))\r\n                .concat(this.checkHorizontalFromCoord(coord))\r\n        return addScore\r\n    }\r\n\r\n    private checkVerticalFromCoord(coord: {x: number, y: number}) : {x: number, y: number}[] {\r\n        const result : {x: number, y: number}[] = []\r\n        let startY = coord.y\r\n        for (; this.field[startY] && this.field[startY][coord.x] === this.field[coord.y][coord.x]; --startY) {\r\n            result.push({x: coord.x, y: startY})\r\n        }\r\n        startY = coord.y + 1\r\n        for (; this.field[startY] && this.field[startY][coord.x] === this.field[coord.y][coord.x]; ++startY) {\r\n            result.push({x: coord.x, y: startY})\r\n        }\r\n        if (result.length >= this.minCombinationLength) return result\r\n        return []\r\n    }\r\n\r\n    private checkHorizontalFromCoord(coord: {x: number, y: number}) : {x: number, y: number}[] {\r\n        const result : {x: number, y: number}[] = []\r\n        let startX = coord.x\r\n        for (; this.field[coord.y][startX] && this.field[coord.y][startX] === this.field[coord.y][coord.x]; --startX) {\r\n            result.push({x: startX, y: coord.y})\r\n        }\r\n        startX = coord.x + 1\r\n        for (;this.field[coord.y][startX] && this.field[coord.y][startX] === this.field[coord.y][coord.x]; ++startX) {\r\n            result.push({x: startX, y: coord.y})\r\n        }\r\n        if (result.length >= this.minCombinationLength) return result\r\n        return []\r\n    }\r\n}"]}