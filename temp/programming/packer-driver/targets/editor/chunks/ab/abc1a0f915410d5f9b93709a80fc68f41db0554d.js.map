{"version":3,"sources":["file:///F:/git/TestMatch3/assets/Scripts/Logic/Field.ts"],"names":["Field","BallColor","AbstractDispatcher","constructor","isFinished","_state","field","minCombinationLength","garanteedStartCombinations","fieldSize","length","generateNewField","GetField","StartNewGame","name","score","_dispatcher","Post","h","NewGame","NewScore","OnBallClick","coord","addScore","checkFromCoord","removeFromCoord","dropDownBalls","fillEmptyCellsRandom","UpdateField","checkAllOption","EndGame","concat","checkVerticalFromCoord","checkHorizontalFromCoord","checkDiagonalFromCoord","result","startY","y","x","push","startX","ball","NONE","yAdditional","checkAllVerticalOption","checkAllHorizontalOption","checkAllDiagonalOption","j","consecutiveSameColorCount","currentColor","i","k","Array","fill","map","generateGaranteedStartCombinations","combinationValue","Object","values","Math","floor","random","direction","startPosition"],"mappings":"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","sourcesContent":["import { BallColor } from \"../Enums/BallColor\";\r\nimport { GameState } from \"../Session/GameState\";\r\nimport { AbstractDispatcher } from \"../Utils/Dispatcher\";\r\nimport { GameStatsInfo } from \"./GameStatsInfo\";\r\n\r\n\r\nexport interface IFieldHandler {\r\n    NewGame(name: string): void\r\n    NewScore?(score: number): void\r\n    UpdateField?(field: Array<Array<BallColor>>, fromOutside?: boolean): void\r\n    EndGame(info: GameStatsInfo): void\r\n}\r\n\r\nexport class Field extends AbstractDispatcher <IFieldHandler> {\r\n    readonly minCombinationLength = 3;\r\n    readonly garanteedStartCombinations = 4;\r\n    readonly fieldSize = 20;\r\n\r\n    constructor(\r\n        isFinished: boolean,\r\n        private _state:GameState,\r\n        private field:Array<Array<BallColor>>) {\r\n        super()\r\n        if (this.field.length === 0 || isFinished) this.generateNewField()\r\n    }\r\n\r\n    GetField(): Array<Array<BallColor>> {\r\n        return this.field\r\n    }\r\n\r\n    StartNewGame(name: string) {\r\n        this._state.isFinished = false\r\n        this._state.name = name\r\n        this._state.score = 0\r\n        this.generateNewField()\r\n        this._dispatcher.Post((h)=>h.NewGame?.(name))\r\n        this._dispatcher.Post((h)=>h.NewScore?.(this._state.score))\r\n    }\r\n\r\n    OnBallClick(coord: {x: number, y: number}) {\r\n        const addScore = this.checkFromCoord(coord)\r\n        if (addScore.length != 0) {\r\n            this.addScore(addScore.length)\r\n\r\n            this.removeFromCoord(addScore)\r\n            /// await animation\r\n            this.dropDownBalls()\r\n            /// await animation\r\n            this.fillEmptyCellsRandom()\r\n            this._dispatcher.Post((h)=>h.UpdateField?.(this.field, true))\r\n        } \r\n\r\n        if (!this.checkAllOption()) {\r\n            this._dispatcher.Post((h)=>h.EndGame({name: this._state.name, score: this._state.score}))\r\n        }\r\n    }\r\n\r\n    private addScore(score: number) {\r\n        this._state.score += score\r\n        this._dispatcher.Post((h)=>h.NewScore?.(this._state.score))\r\n    }\r\n\r\n    private checkFromCoord(coord: {x: number, y: number}) : {x: number, y: number}[] {\r\n        const addScore: {x: number, y: number}[] = []\r\n        addScore.concat(this.checkVerticalFromCoord(coord))\r\n                .concat(this.checkHorizontalFromCoord(coord))\r\n                .concat(this.checkDiagonalFromCoord(coord))\r\n        return addScore\r\n    }\r\n\r\n    private checkVerticalFromCoord(coord: {x: number, y: number}) : {x: number, y: number}[] {\r\n        const result : {x: number, y: number}[] = []\r\n        let startY = coord.y\r\n        for (; this.field[startY] && this.field[startY][coord.x] === this.field[coord.y][coord.x]; --startY) {\r\n            result.push({x: coord.x, y: startY})\r\n        }\r\n        startY = coord.y + 1\r\n        for (; this.field[startY] && this.field[startY][coord.x] === this.field[coord.y][coord.x]; ++startY) {\r\n            result.push({x: coord.x, y: startY})\r\n        }\r\n        if (result.length >= this.minCombinationLength) return result\r\n        return []\r\n    }\r\n\r\n    private checkHorizontalFromCoord(coord: {x: number, y: number}) : {x: number, y: number}[] {\r\n        const result : {x: number, y: number}[] = []\r\n        let startX = coord.x\r\n        for (; this.field[coord.y][startX] && this.field[coord.y][startX] === this.field[coord.y][coord.x]; --startX) {\r\n            result.push({x: startX, y: coord.y})\r\n        }\r\n        startX = coord.x + 1\r\n        for (;this.field[coord.y][startX] && this.field[coord.y][startX] === this.field[coord.y][coord.x]; ++startX) {\r\n            result.push({x: startX, y: coord.y})\r\n        }\r\n        if (result.length >= this.minCombinationLength) return result\r\n        return []\r\n    }\r\n\r\n    private checkDiagonalFromCoord(coord: {x: number, y: number}) : {x: number, y: number}[] {\r\n        const result : {x: number, y: number}[] = []\r\n        let startX = coord.x\r\n        let startY = coord.y\r\n        for (; this.field[startY][startX] && this.field[startY][startX] === this.field[coord.y][coord.x]; ) {\r\n            result.push({x: startX, y: startY})\r\n            --startY\r\n            --startX\r\n        }\r\n        startX = coord.x + 1\r\n        startY = coord.y + 1\r\n        for (; this.field[coord.y][startX] && this.field[startY][startX] === this.field[coord.y][coord.x]; ) {\r\n            result.push({x: startX, y: startY})\r\n            ++startX;\r\n            ++startY;\r\n        }\r\n        if (result.length >= this.minCombinationLength) return result\r\n        return []\r\n    }\r\n\r\n    private removeFromCoord(coord: {x: number, y: number}[]) {\r\n        for (const ball of coord) {\r\n            this.field[ball.y][ball.x] = BallColor.NONE;\r\n        }\r\n        this._dispatcher.Post((h)=> h.UpdateField?.(this.field, false))\r\n    }\r\n\r\n    private dropDownBalls() {\r\n        for(let y = 0; y < this.fieldSize; ++y) {\r\n            for(let x = 0; x < this.fieldSize; ++x) {\r\n                if (this.field[y][x] === BallColor.NONE) {\r\n                    let yAdditional = 1;\r\n                    while (this.field[y + yAdditional] && this.field[y + yAdditional][x] === BallColor.NONE) {\r\n                        ++yAdditional;\r\n                    }\r\n                    this.field[y][x] = this.field[y + yAdditional][x];\r\n                    this.field[y + yAdditional][x] = BallColor.NONE;\r\n                }\r\n            }\r\n        }\r\n        this._dispatcher.Post((h)=> h.UpdateField?.(this.field, false))\r\n    }\r\n\r\n    private checkAllOption() : boolean {\r\n        if (this.checkAllVerticalOption() || \r\n            this.checkAllHorizontalOption() || \r\n            this.checkAllDiagonalOption()) return true;\r\n        return false;\r\n    }\r\n\r\n    private checkAllVerticalOption() {\r\n        for (let j = 0; j < this.field[0].length; j++) {\r\n            let consecutiveSameColorCount = 1;\r\n            let currentColor = this.field[0][j];\r\n            for (let i = 1; i < this.field.length; i++) {\r\n                if (this.field[i][j] === currentColor) {\r\n                    consecutiveSameColorCount++;\r\n                } else {\r\n                    currentColor = this.field[i][j];\r\n                    consecutiveSameColorCount = 1;\r\n                }\r\n                if (consecutiveSameColorCount === this.minCombinationLength) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private checkAllHorizontalOption() {\r\n        for (let i = 0; i < this.field.length; i++) {\r\n            let consecutiveSameColorCount = 1;\r\n            let currentColor = this.field[i][0];\r\n            for (let j = 1; j < this.field[i].length; j++) {\r\n                if (this.field[i][j] === currentColor) {\r\n                    consecutiveSameColorCount++;\r\n                } else {\r\n                    currentColor = this.field[i][j];\r\n                    consecutiveSameColorCount = 1;\r\n                }\r\n                if (consecutiveSameColorCount === this.minCombinationLength) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false\r\n    }\r\n\r\n    private checkAllDiagonalOption() {\r\n        for (let i = 0; i < this.field.length - 2; ++i) {\r\n            for (let j = 0; j < this.field[i].length - 2; ++j) {\r\n                let consecutiveSameColorCount = 1;\r\n                let currentColor = this.field[i][j];\r\n                for (let k = 1; k < 3; k++) {\r\n                    if (this.field[i + k][j + k] === currentColor) {\r\n                        consecutiveSameColorCount++;\r\n                    } else {\r\n                        currentColor = this.field[i + k][j + k];\r\n                        consecutiveSameColorCount = 1;\r\n                    }\r\n                    if (consecutiveSameColorCount === this.minCombinationLength) {\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return false\r\n    }\r\n\r\n    private generateNewField() {\r\n        this.field = new Array(this.fieldSize).fill(null).map(() => new Array(this.fieldSize).fill(null));\r\n        this.generateGaranteedStartCombinations();\r\n        this.fillEmptyCellsRandom();\r\n        this._dispatcher.Post((h)=>h.UpdateField?.(this.field, true))\r\n    }\r\n\r\n    private generateGaranteedStartCombinations() {\r\n        for (let i = 0; i < this.garanteedStartCombinations; ++i) {\r\n            const combinationValue = Object.values(BallColor)[Math.floor(Math.random() * Object.values(BallColor).length - 1)];\r\n            const direction = Math.random() < 0.5 ? 'horizontal' : 'vertical';\r\n            const startPosition = {\r\n              x: Math.floor(Math.random() * (this.fieldSize - this.minCombinationLength)),\r\n              y: Math.floor(Math.random() * (this.fieldSize - this.minCombinationLength))\r\n            };\r\n        \r\n            if (direction === 'horizontal') {\r\n                for (let j = 0; j < this.minCombinationLength; ++j) {\r\n                    this.field[startPosition.y][startPosition.x + j] = combinationValue as BallColor;\r\n                }\r\n            } else {\r\n                for (let j = 0; j < this.minCombinationLength; ++j) {\r\n                    this.field[startPosition.y + j][startPosition.x] = combinationValue as BallColor;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private fillEmptyCellsRandom() {\r\n        for (let i = 0; i < this.fieldSize; ++i) {\r\n            for (let j = 0; j < this.fieldSize; ++j) {\r\n              if (this.field[i][j] === null) {\r\n                  this.field[i][j] = Object.values(BallColor)[Math.floor(Math.random() * Object.values(BallColor).length - 1)] as BallColor;\r\n              }\r\n            }\r\n        };\r\n    }\r\n}"]}