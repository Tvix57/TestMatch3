{"version":3,"sources":["file:///F:/git/TestMatch3/assets/Scripts/Application/Timers.ts"],"names":["_decorator","Component","macro","Dispatcher","ccclass","OfflineTimer","_dispatcher","start","schedule","dt","SchedulerCallback","REPEAT_FOREVER","Post","h","Tick","IsActive","GetTime","Date","AddHandler","arg","AddObserver","RemoveHandler","RemoveObserver","RemoveAll"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,K,OAAAA,K;;AACvBC,MAAAA,U,iBAAAA,U;;;;;;;;;OAEH;AAAEC,QAAAA;AAAF,O,GAAcJ,U;;8BAGPK,Y,WADZD,OAAO,CAAC,cAAD,C,gBAAR,MACaC,YADb,SACkCJ,SADlC,CAEA;AAAA;AAAA;AAAA,eACYK,WADZ,GAC0B;AAAA;AAAA,yCAD1B;AAAA;;AAGIC,QAAAA,KAAK,GAAG;AACJ,eAAKC,QAAL,CAAeC,EAAD,IAAa,KAAKC,iBAAL,EAA3B,EAAoD,CAApD,EAAsDR,KAAK,CAACS,cAA5D;AACH;;AAEDD,QAAAA,iBAAiB,GAAE;AACf,eAAKJ,WAAL,CAAiBM,IAAjB,CAAuBC,CAAD,IAAKA,CAAC,CAACC,IAAF,EAA3B;AACH;;AAEDC,QAAAA,QAAQ,GAAY;AAAE,iBAAO,IAAP;AAAa;;AACnCC,QAAAA,OAAO,GAAS;AAAE,iBAAO,IAAIC,IAAJ,EAAP;AAAmB;;AACrCC,QAAAA,UAAU,CAACC,GAAD,EAA8B;AACpC,eAAKb,WAAL,CAAiBc,WAAjB,CAA6BD,GAA7B;AACH;;AACDE,QAAAA,aAAa,CAACF,GAAD,EAA8B;AACvC,eAAKb,WAAL,CAAiBgB,cAAjB,CAAgCH,GAAhC;AACH;;AACDI,QAAAA,SAAS,GAAS;AACd,eAAKjB,WAAL,CAAiBiB,SAAjB;AACH;;AArBL,O","sourcesContent":["import { _decorator, Component, macro, Node } from 'cc';\r\nimport { Dispatcher } from '../Utils/Dispatcher';\r\nimport { IAppTimer, IAppTimerHandler } from './IAppTimer';\r\nconst { ccclass } = _decorator;\r\n\r\n@ccclass('OfflineTimer')\r\nexport class OfflineTimer extends Component implements IAppTimer\r\n{\r\n    private _dispatcher = new Dispatcher<IAppTimerHandler>\r\n    \r\n    start() {\r\n        this.schedule((dt:number)=>this.SchedulerCallback(),1,macro.REPEAT_FOREVER)\r\n    }\r\n\r\n    SchedulerCallback(){\r\n        this._dispatcher.Post((h)=>h.Tick())\r\n    }\r\n\r\n    IsActive(): boolean { return true }\r\n    GetTime(): Date { return new Date() }\r\n    AddHandler(arg: IAppTimerHandler): void {\r\n        this._dispatcher.AddObserver(arg)\r\n    }\r\n    RemoveHandler(arg: IAppTimerHandler): void {\r\n        this._dispatcher.RemoveObserver(arg)\r\n    }\r\n    RemoveAll(): void {\r\n        this._dispatcher.RemoveAll()\r\n    }\r\n}\r\n\r\n"]}