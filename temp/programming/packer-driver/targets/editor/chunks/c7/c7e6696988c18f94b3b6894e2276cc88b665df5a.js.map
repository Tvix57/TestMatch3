{"version":3,"sources":["file:///F:/git/TestMatch3/assets/Scripts/Scene/ScenePoolManagerComponent.ts"],"names":["EmptyFactory","_decorator","Component","log","Node","error","assert","tween","UIOpacity","LocationType","Dispatcher","PrefabLoader","ccclass","property","Create","node","ScenePoolManagerComponent","type","_locationMap","Map","_dispatcher","_sceneStack","_pool","_isBlockTransfer","loadedIndex","_isStart","_currentSceneShow","End","start","Init","has","loadingScene","loadScene","CreateScene","get","scenePath","set","Transfer","Preload","name","entry","then","value","active","catch","err","finally","Post","arg","OnLoadedScene","size","startScene","AddLocation","location","priority","factory","parameter","blockerNode","undefined","WillTransfer","scene","PopToPriority","push","openScene","length","pop","forwardNode","addChild","getComponent","call","opacity","to","CloseScene","currentNode","children","slice","OnTransfer","removeAllChildren","update","dt","AddHandler","AddObserver","RemoveHandler","RemoveObserver","RemoveAll","TransferBack","GetCurrentLocation","GetCurrentScene","classConstructor"],"mappings":"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","sourcesContent":["import { _decorator, Component, log, Node, error, assert, __private, tween, UIOpacity } from \"cc\";\r\nimport { LocationType } from \"../Enums/LocationType\";\r\nimport { Dispatcher } from \"../Utils/Dispatcher\";\r\nimport { ISceneManager, ITransferHandler } from \"./ISceneManager\";\r\nimport { PrefabLoader } from \"../Utils/PrefabLoader\";\r\n\r\nconst { ccclass, property } = _decorator;\r\n\r\ninterface Factory {\r\n    Create(node: Node, parameter?:string): void;\r\n}\r\n\r\nclass EmptyFactory implements Factory {\r\n    Create(node: Node): void {}\r\n}\r\n\r\ntype LocationEntry = {\r\n    factory: Factory;\r\n    scenePath: string;\r\n    priority: number;\r\n};\r\n\r\n@ccclass(\"ScenePoolManagerComponent\")\r\nexport class ScenePoolManagerComponent extends Component implements ISceneManager {\r\n    @property(Node)\r\n    readonly sceneNode!: Node;\r\n    @property(Node)\r\n    readonly currentNode!: Node;\r\n    @property(Node)\r\n    readonly forwardNode!: Node;\r\n    @property(Node)\r\n    readonly blockerNode!: Node;\r\n    \r\n    @property({type: LocationType})\r\n    loadingScene:LocationType = LocationType.End\r\n    @property({type: LocationType})\r\n    startScene:LocationType = LocationType.End\r\n\r\n    private _locationMap: Map<LocationType, LocationEntry> = new Map();\r\n    private _dispatcher: Dispatcher<ITransferHandler> = new Dispatcher();\r\n    private _sceneStack: Array<LocationType> = [];\r\n    private _pool: Map<LocationType, Node> = new Map();\r\n\r\n    private _isBlockTransfer: boolean = false;\r\n    private loadedIndex = 0;\r\n    private _isStart: boolean = true;\r\n    private _currentSceneShow:LocationType=LocationType.End\r\n\r\n    start() { this.Init() }\r\n\r\n    private async Init() {\r\n        if (!this._pool.has(this.loadingScene)) { \r\n            const loadScene = await this.CreateScene(this._locationMap.get(this.loadingScene)!.scenePath);\r\n            this._pool.set(this.loadingScene, loadScene);\r\n            this.Transfer(this.loadingScene)\r\n            this._isStart = false\r\n        }\r\n    }\r\n\r\n    async Preload(){\r\n        for (const [name, entry] of this._locationMap) {\r\n            this.CreateScene(entry.scenePath)\r\n                .then((value) => {\r\n                    value.active = false;\r\n                    this._pool.set(name, value);\r\n                })\r\n                .catch((err) => {\r\n                    log(entry.scenePath + \" \" + err);\r\n                })\r\n                .finally(() => {\r\n                    this.loadedIndex++;\r\n                    this._dispatcher.Post((arg) => arg.OnLoadedScene?.(this.loadedIndex, this._locationMap.size));\r\n                    if (this.loadedIndex === this._locationMap.size){\r\n                         this.Transfer(this.startScene);\r\n                    }\r\n                });\r\n        }\r\n    }\r\n\r\n    AddLocation(location: LocationType, scenePath: string, priority: number, factory?: Factory) {\r\n        this._locationMap.set(location, { factory:(factory? factory! : new EmptyFactory()), scenePath, priority });\r\n    }\r\n\r\n    Transfer(location: LocationType, parameter?:string): void {\r\n        if (this._isBlockTransfer) return;\r\n        this._isBlockTransfer = true;\r\n        this.blockerNode.active = true;\r\n\r\n        let entry = this._locationMap.get(location);\r\n        if (entry === undefined) {\r\n            error(\"ERROR: NoScene \" + LocationType[location]);\r\n            return;\r\n        }\r\n        this._dispatcher.Post((arg) => arg.WillTransfer(location));\r\n        let scene = this._pool.get(location)!;\r\n        entry!.factory.Create(scene,parameter);\r\n\r\n        this.PopToPriority(entry!.priority);\r\n        this._sceneStack.push(location);\r\n        this.openScene(location);\r\n    }\r\n\r\n    private async CreateScene(name: string) {\r\n        return new PrefabLoader(name).Create();\r\n    }\r\n\r\n    private PopToPriority(priority: number) {\r\n        while (priority <= this._sceneStack.length - 1) this._sceneStack.pop();\r\n    }\r\n\r\n    private openScene(location: LocationType): void {\r\n        if (!this._pool.has(location)) {\r\n            log(\"ScenePoolManagerComponent: \" + LocationType[location] + \" not exist\");\r\n            return;\r\n        }\r\n        this.forwardNode.addChild(this._pool.get(location)!);\r\n        this._pool.get(location)!.active = true;\r\n\r\n        tween(this.forwardNode.getComponent(UIOpacity)!)\r\n        .call(()=>this.forwardNode.getComponent(UIOpacity)!.opacity = 0)\r\n        .to(0.2,{ opacity: 255 } )\r\n        .call(()=>{ \r\n            this.forwardNode.getComponent(UIOpacity)!.opacity = 255\r\n            this.CloseScene()\r\n            this.currentNode.addChild(this.forwardNode.children[0]) \r\n            this._currentSceneShow = this._sceneStack.slice(-1)[0];\r\n\r\n            this._dispatcher.Post((arg) => arg.OnTransfer(location));\r\n            this._isBlockTransfer = false;\r\n            this.blockerNode.active = false;\r\n        })\r\n        .start()\r\n    }\r\n\r\n    private CloseScene() {\r\n        if (this.currentNode.children.length > 0) {\r\n            const scene = this.currentNode.children[0];\r\n            this.currentNode.removeAllChildren();\r\n            scene.active = false;\r\n        }\r\n    }\r\n\r\n    protected update(dt: number): void {\r\n        if(!this._isStart){\r\n            this._isStart = true\r\n        }\r\n    }\r\n\r\n    AddHandler(arg: ITransferHandler): void {\r\n        this._dispatcher.AddObserver(arg);\r\n    }\r\n    RemoveHandler(arg: ITransferHandler): void {\r\n        this._dispatcher.RemoveObserver(arg);\r\n    }\r\n    RemoveAll(): void {\r\n        this._dispatcher.RemoveAll();\r\n    }\r\n\r\n    TransferBack() {\r\n        if (this._sceneStack.length <= 1) {\r\n            assert(false, \"TransferBack with empty scene stack\");\r\n            return;\r\n        }\r\n\r\n        this._sceneStack.pop();\r\n        this.Transfer(this._sceneStack.pop()!);\r\n    }\r\n\r\n    GetCurrentLocation() {\r\n        return this._currentSceneShow;\r\n    }\r\n    GetCurrentScene<T extends Component>(classConstructor: __private._types_globals__Constructor<T> | __private._types_globals__AbstractedConstructor<T>): T | null {\r\n        if(this.currentNode.children.length) return this.currentNode.children[0].getComponent(classConstructor);\r\n        return null\r\n    }\r\n}\r\n"]}