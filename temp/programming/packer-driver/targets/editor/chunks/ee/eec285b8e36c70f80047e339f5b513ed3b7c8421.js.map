{"version":3,"sources":["file:///F:/git/TestMatch3/assets/Scripts/Save/SaveContext.ts"],"names":["SaveContext","GameState","SaveTimerExecutor","constructor","saver","saveDispatcher","timer","_timeSaveExecutor","_state","AddHandler","LoadState","WillSave","DoSave","SaveState","IsFirstLaunch","isFirstLaunch","HasGame","IsGameFinished","GetCurrentSaveState","CreateNewGameState","name","tutor","HasHardsave","copyState","Load","JSON","parse","stringify","hardSave","toJSON","isTutorial","gameState","nextDay","GetTime","undefined","storeState","ResetTemporalyTimer"],"mappings":";;;4DAcaA,W;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AANJC,MAAAA,S,iBAAAA,S;;AAGAC,MAAAA,iB,iBAAAA,iB;;;;;;AAXT;AACA;AACA;AACA;AACA;AACA;;;6BASaF,W,GAAN,MAAMA,WAAN,CACP;AAIIG,QAAAA,WAAW,CACCC,KADD,EAECC,cAFD,EAGCC,KAHD,EAIT;AAAA,eAPMC,iBAON;AAAA,eANMC,MAMN;AAAA,eAHUJ,KAGV,GAHUA,KAGV;AAAA,eAFUC,cAEV,GAFUA,cAEV;AAAA,eADUC,KACV,GADUA,KACV;AACE,eAAKC,iBAAL,GAAyB;AAAA;AAAA,sDAAsBD,KAAtB,EAA4BD,cAA5B,EAA2C,EAA3C,CAAzB;AACAA,UAAAA,cAAc,CAACI,UAAf,CAA0B,IAA1B;AAEA,eAAKD,MAAL,GAAc,KAAKJ,KAAL,CAAWM,SAAX,EAAd;AACH;;AAEDC,QAAAA,QAAQ,GAAS,CAAE;;AAEnBC,QAAAA,MAAM,GAAS;AACX,eAAKR,KAAL,CAAWS,SAAX,CAAqB,KAAKL,MAA1B;AACH;;AAEDM,QAAAA,aAAa,GAAW;AAAA;;AACpB,0DAAO,KAAKN,MAAZ,qBAAO,aAAaO,aAApB,oCAAqC,IAArC;AACH;;AAEDC,QAAAA,OAAO,GACP;AACI,cAAG,KAAKR,MAAR,EACA;AACI,mBAAO,KAAKA,MAAL,CAAYQ,OAAZ,MAAyB,CAAC,KAAKR,MAAL,CAAYS,cAAZ,EAAjC;AACH;;AACD,iBAAO,KAAP;AACH;;AAEDC,QAAAA,mBAAmB,GACnB;AACI,iBAAO,KAAKV,MAAZ;AACH;;AAEDW,QAAAA,kBAAkB,CAACC,IAAD,EAAcC,KAAd,EAClB;AACI,cAAG,KAAKb,MAAL,CAAYc,WAAZ,EAAH,EAA6B;AACzB,gBAAIC,SAAS,GAAG;AAAA;AAAA,wCAAUC,IAAV,CAAeC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAe,KAAKnB,MAAL,CAAYoB,QAAZ,CAAsBC,MAAtB,EAAf,CAAX,CAAf,CAAhB;AACAN,YAAAA,SAAS,CAACH,IAAV,GAAiBA,IAAjB;AACAG,YAAAA,SAAS,CAACO,UAAV,GAAuB,KAAvB;AACA,iBAAKtB,MAAL,CAAauB,SAAb,GAAyBR,SAAzB;AACH,WALD,MAMK;AACD,gBAAIS,OAAO,GAAG,KAAK1B,KAAL,CAAW2B,OAAX,EAAd;AACA,iBAAKzB,MAAL,CAAauB,SAAb,GAAyB;AAAA;AAAA,wCAAe,IAAf,EAAqB,EAArB,EAAyB,MAAI,EAA7B,EAAiCX,IAAjC,EAAsCC,KAAtC,EAA4Ca,SAA5C,EAAsD,CAAtD,EAAwDF,OAAxD,CAAzB;AACH;;AACD,eAAKxB,MAAL,CAAY2B,UAAZ,CAAuBC,mBAAvB;;AACA,eAAKhC,KAAL,CAAWS,SAAX,CAAqB,KAAKL,MAA1B;AACA,iBAAO,KAAKA,MAAZ;AACH;;AAtDL,O","sourcesContent":["/**\r\n * \r\n * SaveContext.ts\r\n * db://assets/Scripts/Save/SaveContext.ts\r\n *\r\n */\r\n\r\nimport { IAppTimer } from '../Application/IAppTimer';\r\nimport { GameState } from \"../Game/GameState\";\r\nimport { SaveDispatcher } from \"./SaveDispatcher\";\r\nimport { ISaveListener, IStateSaver } from \"./SaveInterfaces\";\r\nimport { SaveTimerExecutor } from \"./SaveTimerExecutor\";\r\nimport { ApplicationState } from \"./State\";\r\n\r\nexport class SaveContext implements ISaveListener\r\n{\r\n    private _timeSaveExecutor:SaveTimerExecutor\r\n    private _state:ApplicationState\r\n\r\n    constructor(\r\n        private saver:IStateSaver,\r\n        private saveDispatcher:SaveDispatcher,\r\n        private timer:IAppTimer\r\n    ) {\r\n        this._timeSaveExecutor = new SaveTimerExecutor(timer,saveDispatcher,60)\r\n        saveDispatcher.AddHandler(this)\r\n        \r\n        this._state = this.saver.LoadState() as ApplicationState\r\n    }\r\n    \r\n    WillSave(): void {}\r\n\r\n    DoSave(): void {\r\n        this.saver.SaveState(this._state!)        \r\n    }\r\n\r\n    IsFirstLaunch():boolean {\r\n        return this._state?.isFirstLaunch ?? true\r\n    }\r\n\r\n    HasGame():boolean\r\n    {   \r\n        if(this._state)\r\n        {\r\n            return this._state.HasGame() && !this._state.IsGameFinished()\r\n        }\r\n        return false\r\n    }\r\n\r\n    GetCurrentSaveState():ApplicationState \r\n    {\r\n        return this._state\r\n    }\r\n\r\n    CreateNewGameState(name:string, tutor:boolean):ApplicationState\r\n    {\r\n        if(this._state.HasHardsave()){\r\n            let copyState = GameState.Load(JSON.parse(JSON.stringify(this._state.hardSave!.toJSON())))\r\n            copyState.name = name\r\n            copyState.isTutorial = false\r\n            this._state!.gameState = copyState \r\n        }\r\n        else {\r\n            let nextDay = this.timer.GetTime()\r\n            this._state!.gameState = new GameState( 2000, 17, 100*12, name,tutor,undefined,0,nextDay) \r\n        }\r\n        this._state.storeState.ResetTemporalyTimer()\r\n        this.saver.SaveState(this._state!)\r\n        return this._state!\r\n    }\r\n}"]}