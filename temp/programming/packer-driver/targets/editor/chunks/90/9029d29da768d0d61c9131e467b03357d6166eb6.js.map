{"version":3,"sources":["file:///F:/git/TestMatch3/assets/Scripts/Logic/FieldGenerator.ts"],"names":["FieldGenerator","BallColor","FieldConfig","constructor","field","GenerateNewField","length","fieldSize","i","Array","generateGaranteedStartCombinations","fillEmptyCellsRandom","ShuffuleField","garanteedStartCombinations","combinationValue","Object","values","Math","floor","random","direction","startPosition","x","minCombinationLength","y","j","undefined"],"mappings":"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","sourcesContent":["import { BallColor } from \"../Enums/BallColor\";\r\nimport { FieldConfig } from \"./FieldConfig\";\r\n\r\nexport class FieldGenerator extends FieldConfig {\r\n    constructor (\r\n        private field : Array<Array<BallColor>>) {\r\n        super();\r\n    }\r\n\r\n    GenerateNewField() {\r\n        this.field.length = this.fieldSize;\r\n        for(let i = 0; i < this.fieldSize; ++i) {\r\n            this.field[i] = new Array<BallColor>(this.fieldSize);\r\n        }\r\n        this.generateGaranteedStartCombinations();\r\n        this.fillEmptyCellsRandom();\r\n    }\r\n\r\n    ShuffuleField() {\r\n        \r\n    }\r\n\r\n    private generateGaranteedStartCombinations() {\r\n        for (let i = 0; i < this.garanteedStartCombinations; ++i) {\r\n            const combinationValue = Object.values(BallColor)[Math.floor(Math.random() * Object.values(BallColor).length - 2)];\r\n            const direction = Math.random() < 0.5 ? 'horizontal' : 'vertical';\r\n            const startPosition = {\r\n              x: Math.floor(Math.random() * (this.fieldSize - this.minCombinationLength)),\r\n              y: Math.floor(Math.random() * (this.fieldSize - this.minCombinationLength))\r\n            };\r\n        \r\n            if (direction === 'horizontal') {\r\n                for (let j = 0; j < this.minCombinationLength; ++j) {\r\n                    this.field[startPosition.y][startPosition.x + j] = combinationValue as BallColor;\r\n                }\r\n            } else {\r\n                for (let j = 0; j < this.minCombinationLength; ++j) {\r\n                    this.field[startPosition.y + j][startPosition.x] = combinationValue as BallColor;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private fillEmptyCellsRandom() {\r\n        for (let i = 0; i < this.fieldSize; ++i) {\r\n            for (let j = 0; j < this.fieldSize; ++j) {\r\n                while (!(this.field[i][j] ?? null) || this.field[i][j] === undefined) {\r\n                    this.field[i][j] = Object.values(BallColor)[Math.floor(Math.random() * Object.values(BallColor).length - 2)] as BallColor;\r\n                }\r\n            }\r\n        };\r\n    }\r\n}"]}