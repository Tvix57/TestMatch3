{"version":3,"sources":["file:///F:/git/TestMatch3/assets/Scripts/Scene/AudioManagerComponent.ts"],"names":["_decorator","AudioClip","AudioSource","Component","Node","AudioType","ccclass","property","AudioItem","type","useCount","name","value","clip","SOUND","AudioManagerComponent","GetAudios","audios","map","SetMusicLvl","val","musicLayer","volume","ActivateMusic","isActive","SetSoundLvl","soundLayer","children","forEach","node","getComponent","ActivateSound","InitAudio","item","find","MUSIC","addMusic","addSound","RemoveAudio","removeMusic","removeSound","PlaySound","getComponentsInChildren","cmp","play","BreakeSound","stop","SetLoop","loop","soundNode","newCmp","addComponent","playOnAwake","addChild","setMusic","once","EventType","ENDED","parent","removeChild"],"mappings":"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","sourcesContent":["import { _decorator, Enum, AudioClip, AudioSource, Component, Node } from 'cc';\r\nimport { Audio, IAudioManager } from '../Application/ApplicationInterfaces';\r\nimport { AudioType } from '../Enums/CCEnums';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('AudioItem')\r\nexport class AudioItem {\r\n    @property({type: AudioType})\r\n    public type: AudioType = AudioType.SOUND\r\n\r\n    @property(AudioClip)\r\n    public clip: AudioClip | null = null\r\n\r\n    @property\r\n    set name(value: string) { this.clip ? this.clip.name = value : null }\r\n    get name(): string { return this.clip?.name ?? \"\" }\r\n\r\n    useCount = 0\r\n}\r\n\r\n@ccclass('AudioManagerComponent')\r\nexport class AudioManagerComponent extends Component implements IAudioManager{\r\n    @property(AudioSource)\r\n    musicLayer: AudioSource = null!\r\n\r\n    @property(Node)\r\n    soundLayer: Node = null!\r\n\r\n    @property({type: [AudioItem]})\r\n    audios: AudioItem[] = []\r\n\r\n    GetAudios():Audio[] { return this.audios.map((value)=>{ return {type: value.type, name: value.name, useCount:value.useCount} }) }\r\n\r\n    SetMusicLvl(val: number) {\r\n        this.musicLayer.volume = val\r\n    }\r\n\r\n    ActivateMusic(isActive: boolean) {\r\n    }\r\n\r\n    SetSoundLvl(val: number) {\r\n        this.soundLayer.children.forEach((node) => {\r\n            node.getComponent(AudioSource)!.volume = val\r\n        })\r\n    }\r\n\r\n    ActivateSound(isActive: boolean): void {\r\n    }\r\n    \r\n    InitAudio(name: string, volume: number = 1.0) {\r\n        const item = this.audios.find((item) => item.name === name)\r\n        if (item && item.type == AudioType.MUSIC) { this.addMusic(item, volume) } \r\n        else if (item && item.type == AudioType.SOUND) { this.addSound(item, volume) }\r\n    }\r\n\r\n    RemoveAudio(name: string) {\r\n        const item = this.audios.find((item) => item.name === name)\r\n        if (item && item.type == AudioType.MUSIC) { this.removeMusic(item) } \r\n        else if (item && item.type == AudioType.SOUND) { this.removeSound(item) }\r\n    }\r\n\r\n    PlaySound(name: string) {\r\n        this.soundLayer.getComponentsInChildren(AudioSource).find((cmp) => cmp.clip?.name === name)?.play()\r\n    }\r\n\r\n    BreakeSound(name: string) {\r\n        this.soundLayer.getComponentsInChildren(AudioSource).find((cmp) => cmp.clip?.name === name)?.stop()\r\n    }\r\n\r\n    SetLoop(name: string, loop: boolean) {\r\n        let item = this.soundLayer.getComponentsInChildren(AudioSource).find((cmp) => cmp.clip?.name === name)\r\n        if (item) { item.loop = loop }\r\n    }\r\n\r\n    private addSound(item: AudioItem, volume: number = 1) {\r\n        if (this.soundLayer.getComponentsInChildren(AudioSource).find((cmp) => cmp.clip?.name === item.name)) {\r\n            item.useCount++; \r\n            return \r\n        }\r\n        let soundNode = new Node()\r\n        let newCmp = soundNode.addComponent(AudioSource)\r\n        newCmp.loop = newCmp.playOnAwake = false\r\n        newCmp.clip = item.clip\r\n        newCmp.volume = volume\r\n        this.soundLayer.addChild(soundNode)\r\n    }\r\n\r\n    private addMusic(item: AudioItem, volume: number = 1) {\r\n        if (item.clip !== this.musicLayer.clip) { this.setMusic(item, volume) }\r\n    }\r\n\r\n    private removeSound(item: AudioItem) {\r\n        const cmp = this.soundLayer.getComponentsInChildren(AudioSource).find((cmp) => cmp.clip?.name === item.name)\r\n        if (cmp && item.useCount >= 1) {\r\n            item.useCount--;\r\n            if (item.useCount > 0) { return }\r\n            cmp.node.once(AudioSource.EventType.ENDED, () => {\r\n                cmp.node.parent?.removeChild(cmp.node)\r\n            })\r\n        }\r\n    }\r\n    \r\n    private removeMusic(item: AudioItem) {\r\n        // this.musicLayer.stop()\r\n    }\r\n\r\n    private setMusic(item: AudioItem, volume: number = 1) {\r\n        this.musicLayer.stop()\r\n        this.musicLayer.volume =volume \r\n        this.musicLayer.clip = item.clip\r\n        this.musicLayer.play()\r\n    }\r\n}\r\n\r\n"]}