{"version":3,"sources":["file:///F:/git/TestMatch3/assets/Scripts/Logic/Field.ts"],"names":["Field","log","AbstractDispatcher","FieldController","FieldGenerator","FieldListener","FieldManager","constructor","_state","field","fieldGenerator","fieldManager","fieldListener","fieldController","length","GenerateNewField","GetField","OnBallClick","coord","addScore","CheckFromCoord","RemoveFromCoord","_dispatcher","Post","h","UpdateField","dropDownBalls","bind","DropDownBalls","checkEndGame","CheckAvailableOption","EndGame","name","score","NewScore"],"mappings":"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","sourcesContent":["import { BallColor } from \"../Enums/BallColor\";\r\nimport { GameState } from \"../Session/GameState\";\r\nimport { AbstractDispatcher } from \"../Utils/Dispatcher\";\r\nimport { FieldController } from \"./FieldController\";\r\nimport { FieldGenerator } from \"./FieldGenerator\";\r\nimport { FieldListener } from \"./FieldListener\";\r\nimport { FieldManager } from \"./FieldManager\";\r\nimport { GameStatsInfo } from \"./GameStatsInfo\";\r\n\r\nimport { log } from \"cc\";\r\n\r\n\r\nexport interface IFieldHandler {\r\n    NewGame(name: string): void\r\n    NewScore?(score: number): void\r\n    EndGame(info: GameStatsInfo): void\r\n    UpdateField?(field: Array<Array<BallColor>>, callback?: () => void): void\r\n}\r\n\r\nexport class Field extends AbstractDispatcher <IFieldHandler> {\r\n    private fieldGenerator:FieldGenerator\r\n    private fieldManager:FieldManager\r\n    private fieldListener:FieldListener\r\n    private fieldController:FieldController\r\n\r\n    constructor(\r\n        private _state:GameState,\r\n        private field:Array<Array<BallColor>>) {\r\n        super()\r\n        \r\n        this.fieldGenerator = new FieldGenerator(this.field)\r\n        this.fieldManager = new FieldManager(this.field)\r\n        this.fieldListener = new FieldListener(this.field)\r\n        this.fieldController = new FieldController(this.field)\r\n\r\n        if (this.field.length == 0) {\r\n            this.fieldGenerator.GenerateNewField()\r\n        }\r\n    }\r\n\r\n    GetField(): Array<Array<BallColor>> {\r\n        return this.field\r\n    }\r\n\r\n    OnBallClick(coord: {x: number, y: number}) {\r\n        const addScore = this.fieldManager.CheckFromCoord(coord)\r\n        if (addScore.length != 0) {\r\n            this.addScore(addScore.length)\r\n            this.fieldController.RemoveFromCoord(addScore)\r\n            this._dispatcher.Post((h)=>h.UpdateField?.([...this.field], this.dropDownBalls.bind(this)))\r\n        } \r\n    }\r\n\r\n    private dropDownBalls() {\r\n        log(\"dropDownBalls\")\r\n        this.fieldController.DropDownBalls()\r\n        this._dispatcher.Post((h)=>h.UpdateField?.([...this.field], this.checkEndGame.bind(this)))\r\n    }\r\n\r\n    private checkEndGame() {\r\n        log(\"checkEndGame\")\r\n        if (!this.fieldListener.CheckAvailableOption()) { //// check available shuffle\r\n            this._dispatcher.Post((h)=>h.EndGame({name: this._state.name, score: this._state.score}))\r\n        }\r\n    }\r\n\r\n    private addScore(score: number) {\r\n        this._state.score += score\r\n        this._dispatcher.Post((h)=>h.NewScore?.(this._state.score))\r\n    }\r\n}"]}