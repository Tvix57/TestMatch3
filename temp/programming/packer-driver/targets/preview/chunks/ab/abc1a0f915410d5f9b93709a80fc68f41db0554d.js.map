{"version":3,"sources":["file:///F:/git/TestMatch3/assets/Scripts/Logic/Field.ts"],"names":["Field","AbstractDispatcher","FieldController","FieldGenerator","FieldListener","FieldManager","AnimationType","constructor","_state","field","minCombinationLength","garanteedStartCombinations","fieldSize","fieldGenerator","fieldManager","fieldListener","fieldController","length","GenerateNewField","test","GetField","OnBallClick","coord","addScore","CheckFromCoord","RemoveFromCoord","_dispatcher","Post","h","UpdateField","REMOVE","DropDownBalls","DropDown","CheckAvailableOption","EndGame","name","score","NewScore"],"mappings":"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","sourcesContent":["import { BallColor } from \"../Enums/BallColor\";\r\nimport { GameState } from \"../Session/GameState\";\r\nimport { AbstractDispatcher } from \"../Utils/Dispatcher\";\r\nimport { FieldController } from \"./FieldController\";\r\nimport { FieldGenerator } from \"./FieldGenerator\";\r\nimport { FieldListener } from \"./FieldListener\";\r\nimport { FieldManager } from \"./FieldManager\";\r\nimport { GameStatsInfo } from \"./GameStatsInfo\";\r\n\r\nexport enum AnimationType {\r\n    DropDownNew,\r\n    DropDown,\r\n    REMOVE\r\n}\r\n\r\nexport interface IFieldHandler {\r\n    NewGame(name: string): void\r\n    NewScore?(score: number): void\r\n    EndGame(info: GameStatsInfo): void\r\n    UpdateField?(field: Array<Array<BallColor>>, showAnimation?: AnimationType, animationCallback?: () => void): void\r\n}\r\n\r\nexport class Field extends AbstractDispatcher <IFieldHandler> {\r\n    readonly minCombinationLength = 3;\r\n    readonly garanteedStartCombinations = 4;\r\n    readonly fieldSize = 20;\r\n\r\n    private fieldGenerator:FieldGenerator\r\n    private fieldManager:FieldManager\r\n    private fieldListener:FieldListener\r\n    private fieldController:FieldController\r\n\r\n    constructor(\r\n        private _state:GameState,\r\n        private field:Array<Array<BallColor>>) {\r\n        super()\r\n        \r\n        this.fieldGenerator = new FieldGenerator(this.field)\r\n        this.fieldManager = new FieldManager(this.field)\r\n        this.fieldListener = new FieldListener(this.field)\r\n        this.fieldController = new FieldController(this.field)\r\n\r\n        if (this.field.length == 0) {\r\n            this.fieldGenerator.GenerateNewField()\r\n        }\r\n\r\n        let test = 9\r\n    }\r\n\r\n    GetField(): Array<Array<BallColor>> {\r\n        return this.field\r\n    }\r\n\r\n    OnBallClick(coord: {x: number, y: number}) {\r\n        const addScore = this.fieldManager.CheckFromCoord(coord)\r\n        if (addScore.length != 0) {\r\n            this.addScore(addScore.length)\r\n            this.fieldController.RemoveFromCoord(addScore)\r\n            this._dispatcher.Post((h)=>h.UpdateField?.([...this.field], AnimationType.REMOVE))\r\n            this.fieldController.DropDownBalls()\r\n            this._dispatcher.Post((h)=>h.UpdateField?.([...this.field], AnimationType.DropDown))\r\n        } \r\n        if (!this.fieldListener.CheckAvailableOption()) { //// check available shuffle\r\n            this._dispatcher.Post((h)=>h.EndGame({name: this._state.name, score: this._state.score}))\r\n        }\r\n    }\r\n\r\n    private addScore(score: number) {\r\n        this._state.score += score\r\n        this._dispatcher.Post((h)=>h.NewScore?.(this._state.score))\r\n    }\r\n}"]}