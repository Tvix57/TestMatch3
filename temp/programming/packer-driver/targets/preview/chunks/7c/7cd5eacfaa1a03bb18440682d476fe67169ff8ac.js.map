{"version":3,"sources":["file:///F:/git/TestMatch3/assets/Scripts/Utils/RawResize.ts"],"names":["_decorator","Component","Enum","Node","UITransform","ccclass","requireComponent","executeInEditMode","property","ResizeType","ResizeWay","RawResize","type","tooltip","_nodeUITransform","_parentUITransform","onLoad","getComponent","target","node","isChildOf","parent","on","EventType","SIZE_CHANGED","Update","onDisable","off","ForceUpdate","checkSize","scale","getNewScale","resizeWay","ByScale","setScale","setContentSize","width","height","result","resizeType","FILL","Math","max","min","FIT"],"mappings":";;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,I,OAAAA,I;AAAMC,MAAAA,I,OAAAA,I;AAAMC,MAAAA,W,OAAAA,W;;;;;;;;;OACtC;AAAEC,QAAAA,OAAF;AAAWC,QAAAA,gBAAX;AAA4BC,QAAAA,iBAA5B;AAA+CC,QAAAA;AAA/C,O,GAA4DR,U;;4BAEtDS,U,0BAAAA,U;AAAAA,QAAAA,U,CAAAA,U;AAAAA,QAAAA,U,CAAAA,U;eAAAA,U;;;AAGXP,MAAAA,IAAI,CAACO,UAAD,CAAJ;;2BAEWC,S,0BAAAA,S;AAAAA,QAAAA,S,CAAAA,S;AAAAA,QAAAA,S,CAAAA,S;eAAAA,S;;;AAGXR,MAAAA,IAAI,CAACQ,SAAD,CAAJ;;2BAKYC,S,WAHZN,OAAO,CAAC,WAAD,C,UAEPC,gBAAgB,CAACF,WAAD,C,UAGZI,QAAQ,CAAC;AAACI,QAAAA,IAAI,EAAEH;AAAP,OAAD,C,UAGRD,QAAQ,CAAC;AAACI,QAAAA,IAAI,EAAEF;AAAP,OAAD,C,UAGRF,QAAQ,CAAC;AAACI,QAAAA,IAAI,EAAER,WAAP;AAAoBS,QAAAA,OAAO,EAAE;AAA7B,OAAD,C,gBAVZN,iB,oCADD,MAGaI,SAHb,SAG+BV,SAH/B,CAIA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA,eAUYa,gBAVZ;AAAA,eAWYC,kBAXZ;AAAA;;AAacC,QAAAA,MAAM,GAAS;AAAA;;AACrB,eAAKF,gBAAL,GAAwB,KAAKG,YAAL,CAAkBb,WAAlB,CAAxB;;AACA,cAAI,KAAKc,MAAL,IAAe,KAAKC,IAAL,CAAUC,SAAV,CAAoB,KAAKF,MAAL,CAAYC,IAAhC,CAAnB,EAA0D;AACtD,iBAAKJ,kBAAL,GAA0B,KAAKG,MAA/B;AACH,WAFD,MAEO;AACH,iBAAKH,kBAAL,GAA0B,KAAKI,IAAL,CAAUE,MAAV,CAAkBJ,YAAlB,CAA+Bb,WAA/B,CAA1B;AACH;;AACD,eAAKe,IAAL,CAAUG,EAAV,CAAanB,IAAI,CAACoB,SAAL,CAAeC,YAA5B,EAAyC,KAAKC,MAA9C,EAAqD,IAArD;AACA,oCAAKN,IAAL,CAAUE,MAAV,uCAAkBC,EAAlB,CAAqBnB,IAAI,CAACoB,SAAL,CAAeC,YAApC,EAAiD,KAAKC,MAAtD,EAA6D,IAA7D;AACA,eAAKA,MAAL;AACH;;AAESC,QAAAA,SAAS,GAAS;AAAA;;AACxB,qCAAKP,IAAL,CAAUE,MAAV,wCAAkBM,GAAlB,CAAsBxB,IAAI,CAACoB,SAAL,CAAeC,YAArC;AACA,eAAKL,IAAL,CAAUQ,GAAV,CAAcxB,IAAI,CAACoB,SAAL,CAAeC,YAA7B;AACH;;AAEDI,QAAAA,WAAW,GAAG;AACV,eAAKH,MAAL;AACH;;AAEOA,QAAAA,MAAM,GAAG;AACb,cAAI,KAAKI,SAAL,EAAJ,EAAsB;AAClB,gBAAMC,KAAK,GAAG,KAAKC,WAAL,EAAd;;AACA,gBAAI,KAAKC,SAAL,IAAkBtB,SAAS,CAACuB,OAAhC,EAAyC;AACrC,mBAAKd,IAAL,CAAUe,QAAV,CAAmBJ,KAAnB,EAAyBA,KAAzB;AACH,aAFD,MAEO;AACH,mBAAKhB,gBAAL,CAAsBqB,cAAtB,CAAqC,KAAKrB,gBAAL,CAAsBsB,KAAtB,GAA8BN,KAAnE,EAA0E,KAAKhB,gBAAL,CAAsBuB,MAAtB,GAA+BP,KAAzG;AACH;AACJ;AACJ;;AAEOD,QAAAA,SAAS,GAAa;AAC1B,cAAIS,MAAM,GAAG,KAAb;;AACA,cAAI,KAAKC,UAAL,IAAmB9B,UAAU,CAAC+B,IAAlC,EAAwC;AACpCF,YAAAA,MAAM,GAAG,KAAKxB,gBAAL,CAAsBsB,KAAtB,GAA8B,KAAKrB,kBAAL,CAAwBqB,KAAtD,IACA,KAAKtB,gBAAL,CAAsBuB,MAAtB,GAA+B,KAAKtB,kBAAL,CAAwBsB,MADhE;AAEH,WAHD,MAGO;AACHC,YAAAA,MAAM,GAAG,KAAKxB,gBAAL,CAAsBsB,KAAtB,GAA8B,KAAKrB,kBAAL,CAAwBqB,KAAtD,IACA,KAAKtB,gBAAL,CAAsBsB,KAAtB,GAA8B,KAAKrB,kBAAL,CAAwBqB,KADtD,IAEA,KAAKtB,gBAAL,CAAsBuB,MAAtB,GAA+B,KAAKtB,kBAAL,CAAwBsB,MAFvD,IAGA,KAAKvB,gBAAL,CAAsBuB,MAAtB,GAA+B,KAAKtB,kBAAL,CAAwBsB,MAHhE;AAIH;;AACD,iBAAOC,MAAP;AACH;;AAEOP,QAAAA,WAAW,GAAY;AAC3B,cAAI,KAAKQ,UAAL,IAAmB9B,UAAU,CAAC+B,IAAlC,EAAwC;AACpC,mBAAOC,IAAI,CAACC,GAAL,CAAS,KAAK3B,kBAAL,CAAwBsB,MAAxB,GAAiC,KAAKvB,gBAAL,CAAsBuB,MAAhE,EACS,KAAKtB,kBAAL,CAAwBqB,KAAxB,GAAgC,KAAKtB,gBAAL,CAAsBsB,KAD/D,CAAP;AAEH,WAHD,MAGO;AACH,mBAAOK,IAAI,CAACE,GAAL,CAAS,KAAK5B,kBAAL,CAAwBsB,MAAxB,GAAiC,KAAKvB,gBAAL,CAAsBuB,MAAhE,EACS,KAAKtB,kBAAL,CAAwBqB,KAAxB,GAAgC,KAAKtB,gBAAL,CAAsBsB,KAD/D,CAAP;AAEH;AACJ;;AAnEL,O;;;;;iBAE6B3B,UAAU,CAACmC,G;;;;;;;iBAGblC,SAAS,CAACuB,O;;;;;;;iBAGJ,I","sourcesContent":["import { _decorator, Component, Enum, Node, UITransform } from 'cc';\r\nconst { ccclass, requireComponent,executeInEditMode, property } = _decorator;\r\n\r\nexport enum ResizeType {\r\n    FIT,\r\n    FILL\r\n}Enum(ResizeType)\r\n\r\nexport enum ResizeWay {\r\n    ByScale,\r\n    ByContentSize\r\n}Enum(ResizeWay)\r\n\r\n@ccclass('RawResize')\r\n@executeInEditMode\r\n@requireComponent(UITransform)\r\nexport class RawResize extends Component \r\n{\r\n    @property({type: ResizeType})\r\n    resizeType: ResizeType = ResizeType.FIT\r\n\r\n    @property({type: ResizeWay})\r\n    resizeWay: ResizeWay = ResizeWay.ByScale\r\n\r\n    @property({type: UITransform, tooltip: 'Target node to resize. Parent or DeepParen ONLY'})\r\n    target: UITransform | null = null\r\n\r\n    private _nodeUITransform!:UITransform\r\n    private _parentUITransform!:UITransform\r\n\r\n    protected onLoad(): void {\r\n        this._nodeUITransform = this.getComponent(UITransform)!\r\n        if (this.target && this.node.isChildOf(this.target.node)) {\r\n            this._parentUITransform = this.target\r\n        } else {\r\n            this._parentUITransform = this.node.parent!.getComponent(UITransform)!\r\n        }\r\n        this.node.on(Node.EventType.SIZE_CHANGED,this.Update,this)\r\n        this.node.parent?.on(Node.EventType.SIZE_CHANGED,this.Update,this)\r\n        this.Update()\r\n    }\r\n\r\n    protected onDisable(): void {\r\n        this.node.parent?.off(Node.EventType.SIZE_CHANGED)\r\n        this.node.off(Node.EventType.SIZE_CHANGED)\r\n    }\r\n\r\n    ForceUpdate() {\r\n        this.Update()\r\n    }\r\n\r\n    private Update() {\r\n        if (this.checkSize()) {\r\n            const scale = this.getNewScale()\r\n            if (this.resizeWay == ResizeWay.ByScale) {\r\n                this.node.setScale(scale,scale)\r\n            } else {\r\n                this._nodeUITransform.setContentSize(this._nodeUITransform.width * scale, this._nodeUITransform.height * scale)\r\n            }\r\n        }\r\n    }\r\n\r\n    private checkSize() : boolean {\r\n        let result = false;\r\n        if (this.resizeType == ResizeType.FILL) {\r\n            result = this._nodeUITransform.width < this._parentUITransform.width ||\r\n                     this._nodeUITransform.height < this._parentUITransform.height\r\n        } else {\r\n            result = this._nodeUITransform.width > this._parentUITransform.width ||\r\n                     this._nodeUITransform.width < this._parentUITransform.width ||\r\n                     this._nodeUITransform.height < this._parentUITransform.height ||\r\n                     this._nodeUITransform.height > this._parentUITransform.height\r\n        }\r\n        return result\r\n    }\r\n\r\n    private getNewScale() : number {\r\n        if (this.resizeType == ResizeType.FILL) {\r\n            return Math.max(this._parentUITransform.height / this._nodeUITransform.height,\r\n                            this._parentUITransform.width / this._nodeUITransform.width )\r\n        } else {\r\n            return Math.min(this._parentUITransform.height / this._nodeUITransform.height, \r\n                            this._parentUITransform.width / this._nodeUITransform.width )\r\n        }\r\n    }\r\n}"]}