{"version":3,"sources":["file:///F:/git/TestMatch3/assets/Scripts/Dialog/DialogManagerComponent.ts"],"names":["DialogEntry","_decorator","Animation","AnimationComponent","Component","Node","Dispatcher","ccclass","property","constructor","node","priority","dialogName","DialogManagerComponent","_dispatcher","_dialogStack","_isShow","OpenDialog","newEntry","index","findIndex","h","splice","push","Post","WillDialogShow","CloseDialog","length","component","getComponent","play","on","EventType","FINISHED","onAnimationEvent","GetTopDialogName","CloseAllDialogs","dialogNode","removeAllChildren","type","state","shift","update","dt","addChild","OnDialogShow","AddHandler","arg","AddObserver","RemoveHandler","RemoveObserver","RemoveAll"],"mappings":"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","sourcesContent":["import { _decorator, Animation, AnimationComponent, AnimationState, Component, Node } from 'cc';\r\nimport { Dispatcher } from '../Utils/Dispatcher';\r\nimport { IDialogManager, IDialogHandler } from './IDialogManager';\r\nconst { ccclass, property } = _decorator;\r\n\r\nclass DialogEntry \r\n{\r\n    readonly node: Node;\r\n    readonly priority: number;\r\n    readonly dialogName: string;\r\n\r\n    constructor(node: Node, priority: number, dialogName: string) {\r\n        this.node = node;\r\n        this.priority = priority;\r\n        this.dialogName = dialogName;\r\n    }\r\n}\r\n\r\n@ccclass('DialogManagerComponent')\r\nexport class DialogManagerComponent extends Component implements IDialogManager\r\n{\r\n    @property(Node)\r\n    dialogNode:Node=null!\r\n\r\n    private _dispatcher:Dispatcher<IDialogHandler> = new Dispatcher\r\n    private _dialogStack:Array<DialogEntry> = []\r\n    private _isShow : boolean = false\r\n\r\n    OpenDialog(node:Node, dialogName:string, priority:number = 0)\r\n    {\r\n        let newEntry = new DialogEntry(node,priority,dialogName)\r\n        let index = this._dialogStack.findIndex((h)=>h.priority < priority)\r\n        if(index != -1) {\r\n            this._dialogStack.splice(index+(this._isShow ? 1:0),0,newEntry)\r\n        }\r\n        else{\r\n            this._dialogStack.push(newEntry)\r\n            this._dispatcher.Post((h)=>h.WillDialogShow?.())\r\n        }\r\n    }\r\n\r\n    CloseDialog():boolean\r\n    {\r\n        if(!this._isShow || this._dialogStack.length == 0) return false\r\n\r\n        const component = this._dialogStack[0].node.getComponent(AnimationComponent)\r\n        component?.play(\"Close\")\r\n        component?.on(Animation.EventType.FINISHED, this.onAnimationEvent, this)\r\n        return true\r\n    }\r\n    GetTopDialogName():string { return this._dialogStack.length > 0 ?  this._dialogStack[0].dialogName : \"\" }\r\n\r\n    CloseAllDialogs(){\r\n        this.dialogNode.removeAllChildren()\r\n        this._dialogStack.length = 0\r\n        this._isShow = false\r\n    }\r\n\r\n    onAnimationEvent(type: Animation.EventType, state: AnimationState) {\r\n        this.dialogNode.removeAllChildren()\r\n        this._dialogStack.shift()\r\n        this._isShow = false\r\n    }\r\n\r\n    protected update(dt: number): void {\r\n        if(!this._isShow && this._dialogStack.length > 0){\r\n            this._isShow = true\r\n            this.dialogNode.addChild(this._dialogStack[0].node)\r\n            this._dialogStack[0].node.getComponent(AnimationComponent)?.play(\"Open\")\r\n            this._dispatcher.Post((h)=>h.OnDialogShow?.())\r\n        }\r\n    }\r\n\r\n    AddHandler(arg: IDialogHandler): void {\r\n        this._dispatcher.AddObserver(arg)\r\n    }\r\n    RemoveHandler(arg: IDialogHandler): void {\r\n        this._dispatcher.RemoveObserver(arg)\r\n    }\r\n    RemoveAll(): void {\r\n        this._dispatcher.RemoveAll()\r\n    }\r\n}\r\n\r\n"]}